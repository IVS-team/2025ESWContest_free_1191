// Generated by gencpp from file msg_pkg/ProcessedObject.msg
// DO NOT EDIT!


#ifndef MSG_PKG_MESSAGE_PROCESSEDOBJECT_H
#define MSG_PKG_MESSAGE_PROCESSEDOBJECT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>

namespace msg_pkg
{
template <class ContainerAllocator>
struct ProcessedObject_
{
  typedef ProcessedObject_<ContainerAllocator> Type;

  ProcessedObject_()
    : object_id(0)
    , relative_distance(0.0)
    , risk_level(0)
    , relative_position()
    , global_position()  {
    }
  ProcessedObject_(const ContainerAllocator& _alloc)
    : object_id(0)
    , relative_distance(0.0)
    , risk_level(0)
    , relative_position(_alloc)
    , global_position(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _object_id_type;
  _object_id_type object_id;

   typedef double _relative_distance_type;
  _relative_distance_type relative_distance;

   typedef int32_t _risk_level_type;
  _risk_level_type risk_level;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _relative_position_type;
  _relative_position_type relative_position;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _global_position_type;
  _global_position_type global_position;





  typedef boost::shared_ptr< ::msg_pkg::ProcessedObject_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_pkg::ProcessedObject_<ContainerAllocator> const> ConstPtr;

}; // struct ProcessedObject_

typedef ::msg_pkg::ProcessedObject_<std::allocator<void> > ProcessedObject;

typedef boost::shared_ptr< ::msg_pkg::ProcessedObject > ProcessedObjectPtr;
typedef boost::shared_ptr< ::msg_pkg::ProcessedObject const> ProcessedObjectConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_pkg::ProcessedObject_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_pkg::ProcessedObject_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_pkg::ProcessedObject_<ContainerAllocator1> & lhs, const ::msg_pkg::ProcessedObject_<ContainerAllocator2> & rhs)
{
  return lhs.object_id == rhs.object_id &&
    lhs.relative_distance == rhs.relative_distance &&
    lhs.risk_level == rhs.risk_level &&
    lhs.relative_position == rhs.relative_position &&
    lhs.global_position == rhs.global_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_pkg::ProcessedObject_<ContainerAllocator1> & lhs, const ::msg_pkg::ProcessedObject_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::ProcessedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::ProcessedObject_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::ProcessedObject_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a5c038ccad5ad73f55b80d3464c5fdb7";
  }

  static const char* value(const ::msg_pkg::ProcessedObject_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa5c038ccad5ad73fULL;
  static const uint64_t static_value2 = 0x55b80d3464c5fdb7ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_pkg/ProcessedObject";
  }

  static const char* value(const ::msg_pkg::ProcessedObject_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 object_id\n"
"float64 relative_distance\n"
"int32 risk_level\n"
"geometry_msgs/Point relative_position\n"
"geometry_msgs/Point global_position\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msg_pkg::ProcessedObject_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.relative_distance);
      stream.next(m.risk_level);
      stream.next(m.relative_position);
      stream.next(m.global_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProcessedObject_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_pkg::ProcessedObject_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_pkg::ProcessedObject_<ContainerAllocator>& v)
  {
    s << indent << "object_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.object_id);
    s << indent << "relative_distance: ";
    Printer<double>::stream(s, indent + "  ", v.relative_distance);
    s << indent << "risk_level: ";
    Printer<int32_t>::stream(s, indent + "  ", v.risk_level);
    s << indent << "relative_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.relative_position);
    s << indent << "global_position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.global_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_PKG_MESSAGE_PROCESSEDOBJECT_H
