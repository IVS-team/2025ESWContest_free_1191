// Generated by gencpp from file msg_pkg/GetMapCompressedResponse.msg
// DO NOT EDIT!


#ifndef MSG_PKG_MESSAGE_GETMAPCOMPRESSEDRESPONSE_H
#define MSG_PKG_MESSAGE_GETMAPCOMPRESSEDRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/CompressedImage.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace msg_pkg
{
template <class ContainerAllocator>
struct GetMapCompressedResponse_
{
  typedef GetMapCompressedResponse_<ContainerAllocator> Type;

  GetMapCompressedResponse_()
    : success(false)
    , message()
    , image()
    , image_points_px()
    , map_tm_points()
    , yaw0_unit()  {
    }
  GetMapCompressedResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , image(_alloc)
    , image_points_px()
    , map_tm_points()
    , yaw0_unit(_alloc)  {
  (void)_alloc;
      image_points_px.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));

      map_tm_points.assign( ::geometry_msgs::Point_<ContainerAllocator> (_alloc));
  }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef  ::sensor_msgs::CompressedImage_<ContainerAllocator>  _image_type;
  _image_type image;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 4>  _image_points_px_type;
  _image_points_px_type image_points_px;

   typedef boost::array< ::geometry_msgs::Point_<ContainerAllocator> , 4>  _map_tm_points_type;
  _map_tm_points_type map_tm_points;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _yaw0_unit_type;
  _yaw0_unit_type yaw0_unit;





  typedef boost::shared_ptr< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetMapCompressedResponse_

typedef ::msg_pkg::GetMapCompressedResponse_<std::allocator<void> > GetMapCompressedResponse;

typedef boost::shared_ptr< ::msg_pkg::GetMapCompressedResponse > GetMapCompressedResponsePtr;
typedef boost::shared_ptr< ::msg_pkg::GetMapCompressedResponse const> GetMapCompressedResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator1> & lhs, const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.image == rhs.image &&
    lhs.image_points_px == rhs.image_points_px &&
    lhs.map_tm_points == rhs.map_tm_points &&
    lhs.yaw0_unit == rhs.yaw0_unit;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator1> & lhs, const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "54ee168365956cd5736b351118adcd18";
  }

  static const char* value(const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x54ee168365956cd5ULL;
  static const uint64_t static_value2 = 0x736b351118adcd18ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_pkg/GetMapCompressedResponse";
  }

  static const char* value(const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string message\n"
"sensor_msgs/CompressedImage image\n"
"geometry_msgs/Point[4] image_points_px\n"
"geometry_msgs/Point[4] map_tm_points\n"
"geometry_msgs/Vector3 yaw0_unit\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/CompressedImage\n"
"# This message contains a compressed image\n"
"\n"
"Header header        # Header timestamp should be acquisition time of image\n"
"                     # Header frame_id should be optical frame of camera\n"
"                     # origin of frame should be optical center of camera\n"
"                     # +x should point to the right in the image\n"
"                     # +y should point down in the image\n"
"                     # +z should point into to plane of the image\n"
"\n"
"string format        # Specifies the format of the data\n"
"                     #   Acceptable values:\n"
"                     #     jpeg, png\n"
"uint8[] data         # Compressed image buffer\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.image);
      stream.next(m.image_points_px);
      stream.next(m.map_tm_points);
      stream.next(m.yaw0_unit);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMapCompressedResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_pkg::GetMapCompressedResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "image: ";
    s << std::endl;
    Printer< ::sensor_msgs::CompressedImage_<ContainerAllocator> >::stream(s, indent + "  ", v.image);
    s << indent << "image_points_px[]" << std::endl;
    for (size_t i = 0; i < v.image_points_px.size(); ++i)
    {
      s << indent << "  image_points_px[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.image_points_px[i]);
    }
    s << indent << "map_tm_points[]" << std::endl;
    for (size_t i = 0; i < v.map_tm_points.size(); ++i)
    {
      s << indent << "  map_tm_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.map_tm_points[i]);
    }
    s << indent << "yaw0_unit: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.yaw0_unit);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_PKG_MESSAGE_GETMAPCOMPRESSEDRESPONSE_H
