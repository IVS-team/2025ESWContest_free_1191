# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from v2v_com/ObstacleData.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class ObstacleData(genpy.Message):
  _md5sum = "c7c5bd8b9af820dc426a86df5648338e"
  _type = "v2v_com/ObstacleData"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# 개별 장애물 데이터
geometry_msgs/Point obstacle_global
float32 ob_height
float32 ob_width
float32 a_ob_distance
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['obstacle_global','ob_height','ob_width','a_ob_distance']
  _slot_types = ['geometry_msgs/Point','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       obstacle_global,ob_height,ob_width,a_ob_distance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleData, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.obstacle_global is None:
        self.obstacle_global = geometry_msgs.msg.Point()
      if self.ob_height is None:
        self.ob_height = 0.
      if self.ob_width is None:
        self.ob_width = 0.
      if self.a_ob_distance is None:
        self.a_ob_distance = 0.
    else:
      self.obstacle_global = geometry_msgs.msg.Point()
      self.ob_height = 0.
      self.ob_width = 0.
      self.a_ob_distance = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d3f().pack(_x.obstacle_global.x, _x.obstacle_global.y, _x.obstacle_global.z, _x.ob_height, _x.ob_width, _x.a_ob_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacle_global is None:
        self.obstacle_global = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.obstacle_global.x, _x.obstacle_global.y, _x.obstacle_global.z, _x.ob_height, _x.ob_width, _x.a_ob_distance,) = _get_struct_3d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d3f().pack(_x.obstacle_global.x, _x.obstacle_global.y, _x.obstacle_global.z, _x.ob_height, _x.ob_width, _x.a_ob_distance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.obstacle_global is None:
        self.obstacle_global = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 36
      (_x.obstacle_global.x, _x.obstacle_global.y, _x.obstacle_global.z, _x.ob_height, _x.ob_width, _x.a_ob_distance,) = _get_struct_3d3f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d3f = None
def _get_struct_3d3f():
    global _struct_3d3f
    if _struct_3d3f is None:
        _struct_3d3f = struct.Struct("<3d3f")
    return _struct_3d3f
