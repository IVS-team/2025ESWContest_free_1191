// Generated by gencpp from file v2v_com/V2V.msg
// DO NOT EDIT!


#ifndef V2V_COM_MESSAGE_V2V_H
#define V2V_COM_MESSAGE_V2V_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <v2v_com/ObstacleData.h>

namespace v2v_com
{
template <class ContainerAllocator>
struct V2V_
{
  typedef V2V_<ContainerAllocator> Type;

  V2V_()
    : header()
    , a_global()
    , a_yaw(0.0)
    , obstacles()  {
    }
  V2V_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , a_global(_alloc)
    , a_yaw(0.0)
    , obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _a_global_type;
  _a_global_type a_global;

   typedef float _a_yaw_type;
  _a_yaw_type a_yaw;

   typedef std::vector< ::v2v_com::ObstacleData_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::v2v_com::ObstacleData_<ContainerAllocator> >> _obstacles_type;
  _obstacles_type obstacles;





  typedef boost::shared_ptr< ::v2v_com::V2V_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::v2v_com::V2V_<ContainerAllocator> const> ConstPtr;

}; // struct V2V_

typedef ::v2v_com::V2V_<std::allocator<void> > V2V;

typedef boost::shared_ptr< ::v2v_com::V2V > V2VPtr;
typedef boost::shared_ptr< ::v2v_com::V2V const> V2VConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::v2v_com::V2V_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::v2v_com::V2V_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::v2v_com::V2V_<ContainerAllocator1> & lhs, const ::v2v_com::V2V_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.a_global == rhs.a_global &&
    lhs.a_yaw == rhs.a_yaw &&
    lhs.obstacles == rhs.obstacles;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::v2v_com::V2V_<ContainerAllocator1> & lhs, const ::v2v_com::V2V_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace v2v_com

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::v2v_com::V2V_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2v_com::V2V_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2v_com::V2V_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2v_com::V2V_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2v_com::V2V_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2v_com::V2V_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::v2v_com::V2V_<ContainerAllocator> >
{
  static const char* value()
  {
    return "100a5c98016f608ae0d405a275ce49f4";
  }

  static const char* value(const ::v2v_com::V2V_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x100a5c98016f608aULL;
  static const uint64_t static_value2 = 0xe0d405a275ce49f4ULL;
};

template<class ContainerAllocator>
struct DataType< ::v2v_com::V2V_<ContainerAllocator> >
{
  static const char* value()
  {
    return "v2v_com/V2V";
  }

  static const char* value(const ::v2v_com::V2V_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::v2v_com::V2V_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 종합 데이터\n"
"std_msgs/Header header\n"
"geometry_msgs/Point a_global\n"
"float32 a_yaw\n"
"v2v_com/ObstacleData[] obstacles\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: v2v_com/ObstacleData\n"
"# 개별 장애물 데이터\n"
"geometry_msgs/Point obstacle_global\n"
"float32 ob_height\n"
"float32 ob_width\n"
"float32 a_ob_distance\n"
;
  }

  static const char* value(const ::v2v_com::V2V_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::v2v_com::V2V_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.a_global);
      stream.next(m.a_yaw);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct V2V_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::v2v_com::V2V_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::v2v_com::V2V_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "a_global: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.a_global);
    s << indent << "a_yaw: ";
    Printer<float>::stream(s, indent + "  ", v.a_yaw);
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::v2v_com::ObstacleData_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2V_COM_MESSAGE_V2V_H
