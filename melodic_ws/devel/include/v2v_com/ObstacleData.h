// Generated by gencpp from file v2v_com/ObstacleData.msg
// DO NOT EDIT!


#ifndef V2V_COM_MESSAGE_OBSTACLEDATA_H
#define V2V_COM_MESSAGE_OBSTACLEDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace v2v_com
{
template <class ContainerAllocator>
struct ObstacleData_
{
  typedef ObstacleData_<ContainerAllocator> Type;

  ObstacleData_()
    : obstacle_global()
    , ob_height(0.0)
    , ob_width(0.0)
    , a_ob_distance(0.0)  {
    }
  ObstacleData_(const ContainerAllocator& _alloc)
    : obstacle_global(_alloc)
    , ob_height(0.0)
    , ob_width(0.0)
    , a_ob_distance(0.0)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _obstacle_global_type;
  _obstacle_global_type obstacle_global;

   typedef float _ob_height_type;
  _ob_height_type ob_height;

   typedef float _ob_width_type;
  _ob_width_type ob_width;

   typedef float _a_ob_distance_type;
  _a_ob_distance_type a_ob_distance;





  typedef boost::shared_ptr< ::v2v_com::ObstacleData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::v2v_com::ObstacleData_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleData_

typedef ::v2v_com::ObstacleData_<std::allocator<void> > ObstacleData;

typedef boost::shared_ptr< ::v2v_com::ObstacleData > ObstacleDataPtr;
typedef boost::shared_ptr< ::v2v_com::ObstacleData const> ObstacleDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::v2v_com::ObstacleData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::v2v_com::ObstacleData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::v2v_com::ObstacleData_<ContainerAllocator1> & lhs, const ::v2v_com::ObstacleData_<ContainerAllocator2> & rhs)
{
  return lhs.obstacle_global == rhs.obstacle_global &&
    lhs.ob_height == rhs.ob_height &&
    lhs.ob_width == rhs.ob_width &&
    lhs.a_ob_distance == rhs.a_ob_distance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::v2v_com::ObstacleData_<ContainerAllocator1> & lhs, const ::v2v_com::ObstacleData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace v2v_com

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::v2v_com::ObstacleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::v2v_com::ObstacleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2v_com::ObstacleData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::v2v_com::ObstacleData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2v_com::ObstacleData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::v2v_com::ObstacleData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::v2v_com::ObstacleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c7c5bd8b9af820dc426a86df5648338e";
  }

  static const char* value(const ::v2v_com::ObstacleData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc7c5bd8b9af820dcULL;
  static const uint64_t static_value2 = 0x426a86df5648338eULL;
};

template<class ContainerAllocator>
struct DataType< ::v2v_com::ObstacleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "v2v_com/ObstacleData";
  }

  static const char* value(const ::v2v_com::ObstacleData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::v2v_com::ObstacleData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# 개별 장애물 데이터\n"
"geometry_msgs/Point obstacle_global\n"
"float32 ob_height\n"
"float32 ob_width\n"
"float32 a_ob_distance\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::v2v_com::ObstacleData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::v2v_com::ObstacleData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.obstacle_global);
      stream.next(m.ob_height);
      stream.next(m.ob_width);
      stream.next(m.a_ob_distance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::v2v_com::ObstacleData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::v2v_com::ObstacleData_<ContainerAllocator>& v)
  {
    s << indent << "obstacle_global: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.obstacle_global);
    s << indent << "ob_height: ";
    Printer<float>::stream(s, indent + "  ", v.ob_height);
    s << indent << "ob_width: ";
    Printer<float>::stream(s, indent + "  ", v.ob_width);
    s << indent << "a_ob_distance: ";
    Printer<float>::stream(s, indent + "  ", v.a_ob_distance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // V2V_COM_MESSAGE_OBSTACLEDATA_H
